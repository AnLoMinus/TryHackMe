#!/bin/sh
#!/bin/bash
#!/usr/bin/sh
#!/usr/bin/bash
#!/usr/bin/env sh
#!/usr/bin/env bash
#!/data/data/com.termux/files/usr/bin/sh
#!/data/data/com.termux/files/usr/bin/bash
###############################################################
#                                                             #
# Created Date : 2022 August                                  #
# Location: Made With LOVE IN ISRAEL !                        #
# CREDIT: To All World Creators free Scripts & Tools          #
# BIG THANX TO ALL COMUNITY THAT SHARE ALL THAT FREE          #
# GREAT SCRIPTS                                               #
#                                                             #
###############################################################
#                                                             #
#-Metadata----------------------------------------------------#
#                                                             #
#  Function: AttacKerberos               (Update: 05-08-2022) #
#  Source: https://github.com/AnLoMinus/HacKingPro            #
#                                                             #
#-Info--------------------------------------------------------#
#                                                             #
#  Enter Your Target, Hack Him, and Get Markdown Report       #
#                                                             #
#-Author(s)---------------------------------------------------#
#                                                             #
#  AnLoMinus ~ https://github.com/AnLoMinus/                  #
#  Skils: Best Copywriter IN the COSMOS!                      #
#                                                             #
#-Operating System--------------------------------------------#
#                                                             #
#  Designed for: Kali / Parrot / Pentoo (VM - VMware)         #
#     Tested on: MacOS                                        #
#                                                             #
#-Notes-------------------------------------------------------#
#                                                             #
#                             ---                             #
#                                                             #
###############################################################

###############################################
#         Checking
###############################################
# Checking For System Package Manager
Check_System() {
      # checking for system package manager
      if [ -e /data/data/com.termux/files/usr/bin/pkg ]; then
      pac="pkg"
      system="termux"
    elif [ $(command -v brew) ]; then
        pac="brew"
        system="mac"
        sudo=""
      elif [ $(command -v apt) ]; then
        pac="apt"
        system="linux"
      elif [ $(command -v apt-get) ]; then
        pac="apt-get"
        system="linux"
      elif [ $(command -v apk) ]; then
        pac="apk"
        system="linux"
      elif [ $(command -v yum) ]; then
        pac="yum"
        system="fedora"
      fi

      # checking for system root access
      if [ $(command -v sudo) ]; then
        sudo="sudo"
      else
        sudo=""
      fi

      # checking for system home dir
      if [ -d $HOME ]; then
        home=$HOME
      else
        home="~/"
      fi

      # checking for system bin dir
      if [ -d /data/data/com.termux/files/usr/bin ]; then
        bin="/data/data/com.termux/files/usr/bin"
      elif [ -d /usr/local/bin ]; then
        bin="/usr/local/bin"
      elif [ -d /bin ]; then
        bin="/bin"
      elif [ -d /sbin ]; then
        bin="/sbin"
      fi
      # cp $0 ${bin}

    }
Check_System


###############################################
#   Define Colors Variables & Run/Start It
###############################################

HacKingProColors(){

  ###############################################
  # Text Attributes
  ###############################################

  # Reset text formatting and colors.
  resetT="\033[m"

  # Faint text.
  faintT="\033[2m"

  ##############################################################################
  # Colors AND Underline
  ##############################################################################
  ORANGE='\033[1;38;5;202m'

  # Bold
  BBlack='\033[1;30m'  # Black
  BRed='\033[1;31m'    # Red
  BGreen='\033[1;32m'  # Green
  BYellow='\033[1;33m' # Yellow
  BBlue='\033[1;34m'   # Blue
  BPurple='\033[1;35m' # Purple
  BCyan='\033[1;36m'   # Cyan
  BWhite='\033[1;37m'  # White

  # Underline
  UBlack='\033[4;30m'  # Black
  URed='\033[4;31m'    # Red
  UGreen='\033[4;32m'  # Green
  UYellow='\033[4;33m' # Yellow
  UBlue='\033[4;34m'   # Blue
  UPurple='\033[4;35m' # Purple
  UCyan='\033[4;36m'   # Cyan
  UWhite='\033[4;37m'  # White}
}
HacKingProColors
AttacKerberos=$(echo "${BRed}Atta${BYellow}Ker${BBlue}Beros")

##############################
#         Target Status
##############################

TargetStatusRun(){
  ToolStatus=$(echo "
    ${BCyan}${faintT}┌──${resetT}${BRed}[${DGrey} ${slowBlink}P${resetT} ${BRed}]${faintT}${BCyan}──╼${resetT} ${BRed}[${DGrey} ⚡️ Planning and Scoping 🎯 ${BRed}]
    ${BCyan}${faintT}|
    ${BCyan}${faintT}|──${resetT}${BRed}[${DGrey} Full Time ${BRed}]${faintT}${BCyan}──╼${resetT} ${BRed}[${DGrey} $(date) ${BRed}]
    ${BCyan}${faintT}|──${resetT}${BRed}[${DGrey} Current Date ${BRed}]${faintT}${BCyan}──╼${resetT} ${BRed}[${DGrey} ${CurrentDate} ${BRed}]
    ${BCyan}${faintT}|──${resetT}${BRed}[${DGrey} Starting Time ${BRed}]${faintT}${BCyan}──╼${resetT} ${BRed}[${DGrey} ${StartingTime} ${BRed}]
    ${BCyan}${faintT}|
    ${BCyan}${faintT}|──${resetT}${BRed}[ 🎯 ]${BCyan}${faintT}──${resetT}${BRed}[${DGrey}$(FunTargetIP)${BRed}]${BCyan}${faintT}──╼  ${LRed}${faintT}IP${BBlue}: ${BGreen}${targetIP}
    ${BCyan}${faintT}|──${resetT}${BRed}[ 🎯 ]${BCyan}${faintT}──${resetT}${BRed}[${DGrey}$(FunTargetDns)${BRed}]${BCyan}${faintT}──╼  ${LRed}${faintT}Dns${BBlue}: ${BGreen}${targetDns}
    ${BCyan}${faintT}|──${resetT}${BRed}[ 🎯 ]${BCyan}${faintT}──${resetT}${BRed}[${DGrey}$(FunTargetName)${BRed}]${BCyan}${faintT}──╼  ${LRed}${faintT}Name${BBlue}: ${BGreen}${targetNAME}
    ${BCyan}${faintT}|──${resetT}${BRed}[ 🎯 ]${BCyan}${faintT}──${resetT}${BRed}[${DGrey}$(FunTargetEmail)${BRed}]${BCyan}${faintT}──╼  ${LRed}${faintT}Email${BBlue}: ${BGreen}${targetEmail}
    ${BCyan}${faintT}|──${resetT}${BRed}[ 🎯 ]${BCyan}${faintT}──${resetT}${BRed}[${DGrey}$(FunTargetPhone)${BRed}]${BCyan}${faintT}──╼  ${LRed}${faintT}Phone${BBlue}: ${BGreen}${targetPhone}
    ${BCyan}${faintT}|
    ${BCyan}${faintT}|──${resetT}${BRed}[ 🎯 ]${BCyan}${faintT}──${resetT}${BRed}[${DGrey}$(FunTargetUserWordlist)${BRed}]${BCyan}${faintT}──╼  ${LRed}${faintT}WordList${BBlue}: ${BGreen}${UserWordList}
    ${BCyan}${faintT}|──${resetT}${BRed}[ 🎯 ]${BCyan}${faintT}──${resetT}${BRed}[${DGrey}$(FunTargetPassWordlist)${BRed}]${BCyan}${faintT}──╼  ${LRed}${faintT}PassList${BBlue}: ${BGreen}${PassWordList}
    ${BCyan}${faintT}|
    ${BCyan}${faintT}|──${resetT}${BRed}[ 🎯 ]${BCyan}${faintT}──${resetT}${BRed}[${DGrey}$(FunTargetUserName)${BRed}]${BCyan}${faintT}──╼  ${LRed}${faintT}Username${BBlue}: ${BGreen}${UserName}
    ${BCyan}${faintT}|──${resetT}${BRed}[ 🎯 ]${BCyan}${faintT}──${resetT}${BRed}[${DGrey}$(FunTargetUserPass)${BRed}]${BCyan}${faintT}──╼  ${LRed}${faintT}Password${BBlue}: ${BGreen}${UserPass}
    ${BCyan}${faintT}|
    ${BCyan}${faintT}└──${resetT}${BRed}[${DGrey} CL ${BRed}]${faintT}${BCyan}──╼${resetT} ${BRed}[${DGrey} Cleaning Target Variables ${BRed}]
    ${InternetStatus}")
    echo "$ToolStatus"
}
/usr/share/wordlists/rockyou.txt

###############################################
#         Put Current PID in Variable
###############################################

thisPID=$(echo "$$")

###############################################
#         HacKingPro Planning
###############################################

# Clear Target VARIABLES
ClearTarget(){
echo "\n\n"
echo "    ┌──[ cl ]──╼ [ ⚡️ Cleaning Target Variables 🎯 ]"
sleep 1
echo "    |"
echo "    |──[ 🧹 ]──[ ✅ ]──╼  IP:  "
targetIP=" "
sleep 0.2
echo "    |──[ 🧹 ]──[ ✅ ]──╼  Dns:  "
targetDns=" "
sleep 0.2
echo "    |──[ 🧹 ]──[ ✅ ]──╼  Name:  "
targetNAME=" "
sleep 0.2
echo "    |──[ 🧹 ]──[ ✅ ]──╼  Email:  "
targetEmail=" "
sleep 0.2
echo "    |──[ 🧹 ]──[ ✅ ]──╼  Phone:  "
targetPhone=" "
sleep 0.2
echo "    |──[ 🧹 ]──[ ✅ ]──╼  UserName:  "
UserName=" "
sleep 0.2
echo "    |──[ 🧹 ]──[ ✅ ]──╼  UserPass:  "
UserPass=" "
sleep 0.2
echo "    |──[ 🧹 ]──[ ✅ ]──╼  Users WordList:  "
UserWordList=" "
sleep 0.2
echo "    |──[ 🧹 ]──[ ✅ ]──╼  Passwords WordList:  "
PassWordList=" "
sleep 1
echo "    |"
echo "    └──[ DONE ]──╼ [ Cleaning DONE ! ]"

  read -p "$Press_ENTER"

}

# Read Target Name From the User
ReadTargetNameFromtheUser(){
  # Read Target Name From the User
  # This Variable is for Case Name.
  t0="$(echo "\n          ${BBlue}┌──[ 🎯 ]──[${BRed} Name ${BBlue}]──╼  ")"
  read -p "$t0" targetNAME
  if [ -z "$targetNAME" ]; then
    #statements
    targetNAME="AnLoMinus"
    # echo "\n\t  ${BRed}[${LGrey}TN${BRed}]${BBlue} - ${LGrey}Target Name ${BBlue} $targetNAME\n"
  fi
}

# Read Target IP From the User
ReadTargetIPFromtheUser(){
# Read Target IP
# This Variable is for AttacKing ~> IP Addresses .
t1="$(echo "\n          ${BBlue}|──[ 🎯 ]──[${BRed} IP ${BBlue}]──╼  ")"
read -p "$t1" targetIP
if [ -z "$targetIP" ]; then
  #statements
  targetIP="127.0.0.1"
  # targetIP=" "
fi
}

# Read Target URL From the User
ReadTargetURLFromtheUser(){
# Read Target URL / Domain / Dns / Server From the User
# This Variable is for OSINT and AttacKing ~> URL / Domain / Dns / Server/ Websites .
t2="$(echo "\n          ${BBlue}|──[ 🎯 ]──[${BRed} URL ${BBlue}]──╼  ")"
read -p "$t2" targetDns
if [ -z "$targetDns" ]; then
  #statements
  targetDns="xXx.AnLoMinus.xXx"
fi
}

# Read Target Email From the User
ReadTargetEmailFromtheUser(){

# This Variable is for OSINT and AttacKing ~> Emails .
t3="$(echo "\n          ${BBlue}|──[ 🎯 ]──[${BRed} Email ${BBlue}]──╼  ")"
read -p "$t3" targetEmail
if [ -z $targetEmail ]; then
  #statements
  targetEmail="Change.Me@Do.Now"
  # echo "\n${BRed}[${LGrey}TE${BRed}]${BBlue} - ${LGrey}Target Email ${BBlue} $targetEmail\n"
fi
}

# Read Target Phone From the User
ReadTargetPhoneFromtheUser(){

# This Variable is for OSINT and AttacKing ~> Phones Numbers .
t4="$(echo "\n          ${BBlue}└──[ 🎯 ]──[${BRed} Phone (With Country Code) ${BBlue}]──╼  ")"
read -p "$t4" targetPhone
if [ -z "$targetPhone" ]; then
  #statements
  targetPhone="9720506933037"
  # echo "\n${BRed}[${LGrey}TP${BRed}]${BBlue} - ${LGrey}Target Phone ${BBlue} $targetPhone\n"
fi
}

# Read Target Users List From the User
User_WordlistLocation(){
  readUsersWordList="$(echo "    Enter Users WordList Location: ")"
  echo "\n"
  read -p "${readUsersWordList}" UserWordList
  echo "\n"
  if [ -z "${UserWordList}" ]; then
    wget https://github.com/Cryilllic/Active-Directory-Wordlists/blob/master/User.txt
    UserWordList="User.txt"
  fi
}

# Read Target Password List From the User
Pass_WordlistLocation(){
  readPasswordsWordList="$(echo "    Enter Passwords WordList Location: ")"
  echo "\n"
  read -p "${readPasswordsWordList}" PassWordList
  echo "\n"
  if [ -z "${PassWordList}" ]; then
    wget https://github.com/Cryilllic/Active-Directory-Wordlists/blob/master/Pass.txt
    PassWordList="Pass.txt"
  fi
}

# Read User Password
ReadUserPassFromtheUser(){
  readUserPass="$(echo "    Enter Password: ")"
  echo "\n"
  read -p "${readUserPass}" UserPass
  echo "\n"
  if [ -z "${UserPass}" ]; then
    UserPass="PassWord"
  fi
}

# Read User Name
ReadUserNameFromtheUser(){
  readUserName="$(echo "    Enter UserName: ")"
  echo "\n"
  read -p "${readUserName}" UserName
  echo "\n"
  if [ -z "${UserName}" ]; then
    UserName="Admin"
  fi
}

# Planning and Scoping
HacKingProPlanning(){

  # Cleaning Screen
  clear

  # Menu Header
  ToolHeaderRun
  # Target Status
  TargetStatusRun
  echo "\n"
  echo "          ${BRed}======================================================================================="
  echo "\n"
  # Define Case {Variable}
  MainDirectoriyCase="${MainDirectoriy}/Case"
  # Create Case Folder
  mkdir "${MainDirectoriyCase}"
  # Continue Case Folder
  cd "${MainDirectoriyCase}"

  # Input Target Name
  ReadTargetNameFromtheUser

  # Define Case Name {Variable}
  MainDirectoriyCaseName="${MainDirectoriyCase}/${targetNAME}"
  # Create Case Name Folder
  mkdir "${MainDirectoriyCaseName}"
  # Continue Case Name Folder
  cd "${MainDirectoriyCaseName}"

  # Define Case Name Planing {Variable}
  MainDirectoriyCaseNamePlanning="${MainDirectoriyCaseName}/Planning"
  # Create Case Name Planing Folder
  mkdir "${MainDirectoriyCaseNamePlanning}"
  # Continue Case Name Planing Folder
  cd "${MainDirectoriyCaseNamePlanning}"

  # Declear Planning File {Variable}
  Planning_File="${MainDirectoriyCaseNamePlanning}${targetNAME}-HacKingPro-Planning-Log.md"

  # Exporting to {Planning_File}
  echo "# Recommended Open With [Atom]() or [Obsidian]() Editor For Normal View." >> ${targetNAME}-HacKingPro-Planning-Log.md
  echo "### $targetNAME Case Date: $(date)" >> ${targetNAME}-HacKingPro-Planning-Log.md
  echo "> - ### Target Name: ${targetNAME}" >> ${targetNAME}-HacKingPro-Planning-Log.md
  # Input Target IP
  ReadTargetIPFromtheUser
  echo "> - ### Target IP: ${targetIP}" >> ${targetNAME}-HacKingPro-Planning-Log.md
  # Input Target URL
  ReadTargetURLFromtheUser
  echo "> - ### Target Domain: ${targetDns}" >> ${targetNAME}-HacKingPro-Planning-Log.md
  # Input Target Email
  ReadTargetEmailFromtheUser
  echo "> - ### Target Email: ${targetEmail}" >> ${targetNAME}-HacKingPro-Planning-Log.md
  # Input Target Phone
  ReadTargetPhoneFromtheUser
  echo "> - ### Target Phone: ${targetPhone}" >> ${targetNAME}-HacKingPro-Planning-Log.md

  User_WordlistLocation
  ReadUserNameFromtheUser

  Pass_WordlistLocation
  ReadUserPassFromtheUser

  # Listing Case Contents
  echo "\n"
  echo "          ${BRed}======================================================================================="
  echo "\n"
  echo "          ${BRed}[${BYellow}🔸${BRed}]${BBlue} - ${BYellow}Listing Case \n"
  echo "\n"
  echo "          ${BYellow} Log Directory ${BRed}[${BGreen} ${MainDirectoriyCase} ${BRed}]\n${BGreen}"
  echo "\n"
  echo "          ${BYellow} Log File ${BRed}[${BGreen} $(ls -lahs * ${MainDirectoriyCase}) ${BRed}]\n${BGreen}"
  echo "\n"
  read -p "$Press_ENTER"

}

# Target Planning Status
FunTargetDns(){
  #statements
  if [ -z ${targetDns} ]; then
    TargetDnsStatusOFF=" ❌ "
    echo "${TargetDnsStatusOFF}"
  else
    targetDnsStatusON=" ✅ "
    echo "${targetDnsStatusON}"
  fi
}
FunTargetIP(){
  #statements
  if [ -z ${targetIP} ]; then
    TargetIpStatusOFF=" ❌ "
    echo "${TargetIpStatusOFF}"
  else
    TargetIpStatusON=" ✅ "
    echo "${TargetIpStatusON}"
  fi
}
FunTargetName(){
  #statements
  if [ -z ${targetNAME} ]; then
    TargetNameStatusOFF=" ❌ "
    echo "${TargetNameStatusOFF}"
  else
    TargetNameStatusON=" ✅ "
    echo "${TargetNameStatusON}"
  fi
}
FunTargetEmail(){
  #statements
  if [ -z ${targetEmail} ]; then
    TargetEmailStatusOFF=" ❌ "
    echo "${TargetEmailStatusOFF}"
  else
    TargetEmailStatusON=" ✅ "
    echo "${TargetEmailStatusON}"
  fi
}
FunTargetPhone(){
      #statements
      if [ -z ${targetPhone} ]; then
        TargetPhoneStatusOFF=" ❌ "
        echo "${TargetPhoneStatusOFF}"
      else
        TargetPhoneStatusON=" ✅ "
        echo "${TargetPhoneStatusON}"
      fi
    }
FunTargetUserWordlist(){
      #statements
      if [ -z ${UserWordList} ]; then
        TargetUserWordListStatusOFF=" ❌ "
        echo "${TargetUserWordListStatusOFF}"
      else
        TargetUserWordListStatusON=" ✅ "
        echo "${TargetUserWordListStatusON}"
      fi
    }
FunTargetPassWordlist(){
      #statements
      if [ -z ${PassWordList} ]; then
        TargetPassWordListStatusOFF=" ❌ "
        echo "${TargetPassWordListStatusOFF}"
      else
        TargetPassWordListStatusON=" ✅ "
        echo "${TargetPassWordListStatusON}"
      fi
    }

FunTargetUserName(){
      #statements
      if [ -z ${UserName} ]; then
        TargetUserNameStatusOFF=" ❌ "
        echo "${TargetUserNameStatusOFF}"
      else
        TargetUserNameStatusON=" ✅ "
        echo "${TargetUserNameStatusON}"
      fi
    }

FunTargetUserPass(){
  #statements
  if [ -z ${UserPass} ]; then
    TargetUserPassStatusOFF=" ❌ "
    echo "${TargetUserPassStatusOFF}"
  else
    TargetUserPassStatusON=" ✅ "
    echo "${TargetUserPassStatusON}"
  fi
}

###############################################
#         Installing Tools
###############################################
# go get github.com/ropnop/kerbrute

UnzipKerbrute(){
  if [ ${system} = "linux" || ${system} = "mac" ]; then
    #statements
    if [ -e "Kerbrute.zip" ]; then
      #statements
      unzip Kerbrute.zip; cd Kerbrute; make help; make all; ls dist/*;
    else
      wget https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_linux_amd64; cp kerbrute_linux_amd64 kerbrute; chmod +x kerbrute; ./kerbrute;
      # git clone https://github.com/ropnop/kerbrute.git
    fi
  fi
}


###############################################
#         Installing Tools
###############################################
# go get github.com/ropnop/kerbrute

# This will brute force user accounts from a domain controller using a supplied wordlist
StartingKerbrute(){
  # If kerbrute exits; Start kerbrute
  if [ -e "kerbrute" ]; then
    RunEnum="$(./kerbrute userenum --dc ${targetDns} -d ${targetDns} ${UserWordList})"
    echo "${RunEnum}"
  else
    clear
    echo "   Kerbrute Not Found; Try Installing Before Starting.."
    break
  fi
}

###############################################
#         AttacKerberos Main Menu
###############################################

MainMenu(){
  while true; do
    clear
    cd "${MainDirectoriy}"
    # ToolHeaderRun
    TargetStatusRun
    AttacKerberosMenuMain="$(echo "

    ${BYellow}${faintT}┌──╼ ${resetT}${BRed}[${BYellow} ${HacKingPro} ${BRed}]
    ${BYellow}${faintT}|
    ${BYellow}${faintT}|──┲─╼ ${resetT}${BRed}[${BYellow} i1 ${BRed}]${BYellow}${faintT}──╼ ${resetT}${BRed}[${BYellow} Kerbrute Installation ${BRed}]
    ${BYellow}${faintT}|  ┖──────────╼ ${BRed}[${BYellow} Install Kerbrute ${BRed}] UnzipKerbrute
    ${BYellow}${faintT}|
    ${BYellow}${faintT}|──┲─╼ ${resetT}${BRed}[${BYellow} s1 ${BRed}]${BYellow}${faintT}──╼ ${resetT}${BRed}[${BYellow} Start Kerbrute ${BRed}]
    ${BYellow}${faintT}|  ┖─┲──╼ ${BRed}[${BYellow} Enumerating Users ${BRed}]
    ${BYellow}${faintT}|    |──╼ ${BRed}[${BYellow} Enumerating Users ${BRed}]
    ${BYellow}${faintT}|    |──╼ ${BRed}[${BYellow} Enumerating Users ${BRed}]
    ${BYellow}${faintT}|    ┖──╼ ${BRed}[${BYellow} Enumerating Users ${BRed}]
    ${BYellow}${faintT}|
    ${BYellow}${faintT}|──┲─╼ ${resetT}${BRed}[${BYellow} 7 ${BRed}]${BYellow}${faintT}──╼ ${resetT}${BRed}[${BYellow} Actions on Objective ${BRed}]
    ${BYellow}${faintT}|  ┖──────────╼ ${BRed}[${BYellow} Destruction ${BRed}]
    ${BYellow}${faintT}|
    ${BYellow}${faintT}|
    ${BYellow}${faintT}└──╼${resetT}${BRed}[${DGrey} X ${BRed}]${BYellow}${faintT}──╼ ${resetT}${BRed}[${DGrey} Exit / Quit / Close ${BRed}]

    ${BGreen}┌──╼${BRed}[${DGrey} ~$(pwd) ${BRed}]
    ${BGreen}|
    ${BGreen}└──╼${BRed}[${BYellow} ${AttacKerberos} ${BRed}]${BGreen}──╼  ${BRed}[${BGreen} 🔮 ${BRed}]${BGreen}──╼ ${BGreen}   ")"

    read -p "$AttacKerberosMenuMain" cmd
    case $cmd in
      i1 )
      UnzipKerbrute
      ;;
      s1 )
      StartingKerbrute
      ;;
      "?"|help|about|About )
      about
      read -p "$Press_ENTER"
      ;;
      x|X|exit|quit|Exit )
    clear
    cd ${MainDirectoriy}
    echo "\n\t\t ${BRed}[🙏🏼${BRed}] ${BWhite}Exit ${HacKingPro} ${BRed}[🙏🏼${BRed}]\n\t\t ${BGreen}"
    break
    ;;
      p|P )
    HacKingProPlanning
    ;;
      cl )
    ClearTarget
    ;;
      ls )
    lahs
    ;;
      * )
    echo "$InvalidOption"
    ;;
  esac
done
}
MainMenu
